package com.hiroshi.cimoc.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMIC".
*/
public class ComicDao extends AbstractDao<Comic, Long> {

    public static final String TABLENAME = "COMIC";

    /**
     * Properties of entity Comic.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Source = new Property(1, int.class, "source", false, "SOURCE");
        public final static Property Cid = new Property(2, String.class, "cid", false, "CID");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Cover = new Property(4, String.class, "cover", false, "COVER");
        public final static Property Highlight = new Property(5, boolean.class, "highlight", false, "HIGHLIGHT");
        public final static Property Local = new Property(6, boolean.class, "local", false, "LOCAL");
        public final static Property Update = new Property(7, String.class, "update", false, "UPDATE");
        public final static Property Finish = new Property(8, Boolean.class, "finish", false, "FINISH");
        public final static Property Favorite = new Property(9, Long.class, "favorite", false, "FAVORITE");
        public final static Property History = new Property(10, Long.class, "history", false, "HISTORY");
        public final static Property Download = new Property(11, Long.class, "download", false, "DOWNLOAD");
        public final static Property Last = new Property(12, String.class, "last", false, "LAST");
        public final static Property Page = new Property(13, Integer.class, "page", false, "PAGE");
        public final static Property Chapter = new Property(14, String.class, "chapter", false, "CHAPTER");
        public final static Property Url = new Property(15, String.class, "url", false, "URL");
    }


    public ComicDao(DaoConfig config) {
        super(config);
    }
    
    public ComicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMIC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SOURCE\" INTEGER NOT NULL ," + // 1: source
                "\"CID\" TEXT NOT NULL ," + // 2: cid
                "\"TITLE\" TEXT NOT NULL ," + // 3: title
                "\"COVER\" TEXT NOT NULL ," + // 4: cover
                "\"HIGHLIGHT\" INTEGER NOT NULL ," + // 5: highlight
                "\"LOCAL\" INTEGER NOT NULL ," + // 6: local
                "\"UPDATE\" TEXT," + // 7: update
                "\"FINISH\" INTEGER," + // 8: finish
                "\"FAVORITE\" INTEGER," + // 9: favorite
                "\"HISTORY\" INTEGER," + // 10: history
                "\"DOWNLOAD\" INTEGER," + // 11: download
                "\"LAST\" TEXT," + // 12: last
                "\"PAGE\" INTEGER," + // 13: page
                "\"CHAPTER\" TEXT," + // 14: chapter
                "\"URL\" TEXT);"); // 15: url
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMIC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Comic entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSource());
        stmt.bindString(3, entity.getCid());
        stmt.bindString(4, entity.getTitle());
        stmt.bindString(5, entity.getCover());
        stmt.bindLong(6, entity.getHighlight() ? 1L: 0L);
        stmt.bindLong(7, entity.getLocal() ? 1L: 0L);
 
        String update = entity.getUpdate();
        if (update != null) {
            stmt.bindString(8, update);
        }
 
        Boolean finish = entity.getFinish();
        if (finish != null) {
            stmt.bindLong(9, finish ? 1L: 0L);
        }
 
        Long favorite = entity.getFavorite();
        if (favorite != null) {
            stmt.bindLong(10, favorite);
        }
 
        Long history = entity.getHistory();
        if (history != null) {
            stmt.bindLong(11, history);
        }
 
        Long download = entity.getDownload();
        if (download != null) {
            stmt.bindLong(12, download);
        }
 
        String last = entity.getLast();
        if (last != null) {
            stmt.bindString(13, last);
        }
 
        Integer page = entity.getPage();
        if (page != null) {
            stmt.bindLong(14, page);
        }
 
        String chapter = entity.getChapter();
        if (chapter != null) {
            stmt.bindString(15, chapter);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(16, url);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Comic entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSource());
        stmt.bindString(3, entity.getCid());
        stmt.bindString(4, entity.getTitle());
        stmt.bindString(5, entity.getCover());
        stmt.bindLong(6, entity.getHighlight() ? 1L: 0L);
        stmt.bindLong(7, entity.getLocal() ? 1L: 0L);
 
        String update = entity.getUpdate();
        if (update != null) {
            stmt.bindString(8, update);
        }
 
        Boolean finish = entity.getFinish();
        if (finish != null) {
            stmt.bindLong(9, finish ? 1L: 0L);
        }
 
        Long favorite = entity.getFavorite();
        if (favorite != null) {
            stmt.bindLong(10, favorite);
        }
 
        Long history = entity.getHistory();
        if (history != null) {
            stmt.bindLong(11, history);
        }
 
        Long download = entity.getDownload();
        if (download != null) {
            stmt.bindLong(12, download);
        }
 
        String last = entity.getLast();
        if (last != null) {
            stmt.bindString(13, last);
        }
 
        Integer page = entity.getPage();
        if (page != null) {
            stmt.bindLong(14, page);
        }
 
        String chapter = entity.getChapter();
        if (chapter != null) {
            stmt.bindString(15, chapter);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(16, url);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Comic readEntity(Cursor cursor, int offset) {
        Comic entity = new Comic( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // source
            cursor.getString(offset + 2), // cid
            cursor.getString(offset + 3), // title
            cursor.getString(offset + 4), // cover
            cursor.getShort(offset + 5) != 0, // highlight
            cursor.getShort(offset + 6) != 0, // local
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // update
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // finish
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // favorite
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // history
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // download
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // last
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // page
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // chapter
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // url
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Comic entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSource(cursor.getInt(offset + 1));
        entity.setCid(cursor.getString(offset + 2));
        entity.setTitle(cursor.getString(offset + 3));
        entity.setCover(cursor.getString(offset + 4));
        entity.setHighlight(cursor.getShort(offset + 5) != 0);
        entity.setLocal(cursor.getShort(offset + 6) != 0);
        entity.setUpdate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFinish(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setFavorite(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setHistory(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setDownload(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setLast(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPage(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setChapter(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setUrl(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Comic entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Comic entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Comic entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
