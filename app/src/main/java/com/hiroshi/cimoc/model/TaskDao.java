package com.hiroshi.cimoc.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK".
*/
public class TaskDao extends AbstractDao<Task, Long> {

    public static final String TABLENAME = "TASK";

    /**
     * Properties of entity Task.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Key = new Property(1, long.class, "key", false, "KEY");
        public final static Property Path = new Property(2, String.class, "path", false, "PATH");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Progress = new Property(4, int.class, "progress", false, "PROGRESS");
        public final static Property Max = new Property(5, int.class, "max", false, "MAX");
    }


    public TaskDao(DaoConfig config) {
        super(config);
    }
    
    public TaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"KEY\" INTEGER NOT NULL ," + // 1: key
                "\"PATH\" TEXT NOT NULL ," + // 2: path
                "\"TITLE\" TEXT NOT NULL ," + // 3: title
                "\"PROGRESS\" INTEGER NOT NULL ," + // 4: progress
                "\"MAX\" INTEGER NOT NULL );"); // 5: max
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Task entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getKey());
        stmt.bindString(3, entity.getPath());
        stmt.bindString(4, entity.getTitle());
        stmt.bindLong(5, entity.getProgress());
        stmt.bindLong(6, entity.getMax());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Task entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getKey());
        stmt.bindString(3, entity.getPath());
        stmt.bindString(4, entity.getTitle());
        stmt.bindLong(5, entity.getProgress());
        stmt.bindLong(6, entity.getMax());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Task readEntity(Cursor cursor, int offset) {
        Task entity = new Task( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // key
            cursor.getString(offset + 2), // path
            cursor.getString(offset + 3), // title
            cursor.getInt(offset + 4), // progress
            cursor.getInt(offset + 5) // max
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Task entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKey(cursor.getLong(offset + 1));
        entity.setPath(cursor.getString(offset + 2));
        entity.setTitle(cursor.getString(offset + 3));
        entity.setProgress(cursor.getInt(offset + 4));
        entity.setMax(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Task entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Task entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Task entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
